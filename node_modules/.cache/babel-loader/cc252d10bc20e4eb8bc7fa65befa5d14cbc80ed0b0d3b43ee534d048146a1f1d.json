{"ast":null,"code":"/**\n * A set of monkey-patched Array helpers.\n * Probably a bad idea to use these in a real production environment.\n * Monkey-patching is confusing to anyone seeing the project for the first\n * time (or coming back to it after a few weeks).\n * That said, this is a simple demo project, so what the hell, let's break\n * some rules =D\n */\n\n/**\n * Array.prototype.swap\n * Rearrange an array to swap the positions of two elements.\n * @param {Number} a - the index of the first element to swap.\n * @param {Number} b - the index of the second element to swap.\n * @returns {Array}\n * @example\n * // returns [ 'a', 'c', 'b' ]\n * [ 'a', 'b', 'c' ].swap(1, 2)\n */\n\n/**\n * Array.range\n * Create a new array of length n, where the elements are numbers\n * from 0 to n - 1.\n * @param {Number} n - the desired length of the range.\n * @returns {Array}\n * @example\n * // returns [ 0, 1, 2, 3 ]\n * Array.range(4);\n */\nArray.range = n => Array.from(new Array(n), (x, i) => i);\n\n/**\n * Array.matrix\n * Create a new two-dimensional array, where each element is its own index.\n * @param {Number} x - the desired number of columns (possible x values)\n * @param {Number} y - the desired number of rows (possible y values)\n * @returns {Array}\n * @example\n * // returns [\n * //   [ 0, 1, 2 ],\n * //   [ 0, 1, 2 ]\n * // ]\n * Array.matrix(3, 2);\n */\nArray.matrix = (x, y) => {\n  const rows = Array.range(y);\n  const columns = Array.range(x);\n  return rows.map((row, i) => columns.slice());\n};","map":{"version":3,"names":["Array","range","n","from","x","i","matrix","y","rows","columns","map","row","slice"],"sources":["/Users/imvk._/Downloads/AlgorithmVisualizer-master/src/helpers/array_helpers.js"],"sourcesContent":["/**\n * A set of monkey-patched Array helpers.\n * Probably a bad idea to use these in a real production environment.\n * Monkey-patching is confusing to anyone seeing the project for the first\n * time (or coming back to it after a few weeks).\n * That said, this is a simple demo project, so what the hell, let's break\n * some rules =D\n */\n\n\n/**\n * Array.prototype.swap\n * Rearrange an array to swap the positions of two elements.\n * @param {Number} a - the index of the first element to swap.\n * @param {Number} b - the index of the second element to swap.\n * @returns {Array}\n * @example\n * // returns [ 'a', 'c', 'b' ]\n * [ 'a', 'b', 'c' ].swap(1, 2)\n */\n\n/**\n * Array.range\n * Create a new array of length n, where the elements are numbers\n * from 0 to n - 1.\n * @param {Number} n - the desired length of the range.\n * @returns {Array}\n * @example\n * // returns [ 0, 1, 2, 3 ]\n * Array.range(4);\n */\nArray.range = n => Array.from(new Array(n), (x,i) => i);\n\n/**\n * Array.matrix\n * Create a new two-dimensional array, where each element is its own index.\n * @param {Number} x - the desired number of columns (possible x values)\n * @param {Number} y - the desired number of rows (possible y values)\n * @returns {Array}\n * @example\n * // returns [\n * //   [ 0, 1, 2 ],\n * //   [ 0, 1, 2 ]\n * // ]\n * Array.matrix(3, 2);\n */\nArray.matrix = (x, y) => {\n    const rows = Array.range(y);\n    const columns = Array.range(x);\n    return rows.map( (row, i) => columns.slice() );\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,KAAK,CAACC,KAAK,GAAGC,CAAC,IAAIF,KAAK,CAACG,IAAI,CAAC,IAAIH,KAAK,CAACE,CAAC,CAAC,EAAE,CAACE,CAAC,EAACC,CAAC,KAAKA,CAAC,CAAC;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,KAAK,CAACM,MAAM,GAAG,CAACF,CAAC,EAAEG,CAAC,KAAK;EACrB,MAAMC,IAAI,GAAGR,KAAK,CAACC,KAAK,CAACM,CAAC,CAAC;EAC3B,MAAME,OAAO,GAAGT,KAAK,CAACC,KAAK,CAACG,CAAC,CAAC;EAC9B,OAAOI,IAAI,CAACE,GAAG,CAAE,CAACC,GAAG,EAAEN,CAAC,KAAKI,OAAO,CAACG,KAAK,CAAC,CAAE,CAAC;AAClD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}