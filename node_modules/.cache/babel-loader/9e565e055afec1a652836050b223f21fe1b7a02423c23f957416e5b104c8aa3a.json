{"ast":null,"code":"/**\n * A set of monkey-patched Array helpers.\n * Probably a bad idea to use these in a real production environment.\n * Monkey-patching is confusing to anyone seeing the project for the first\n * time (or coming back to it after a few weeks).\n * That said, this is a simple demo project, so what the hell, let's break\n * some rules =D\n */ /**\n * Array.prototype.swap\n * Rearrange an array to swap the positions of two elements.\n * @param {Number} a - the index of the first element to swap.\n * @param {Number} b - the index of the second element to swap.\n * @returns {Array}\n * @example\n * // returns [ 'a', 'c', 'b' ]\n * [ 'a', 'b', 'c' ].swap(1, 2)\n */ /**\n * Array.range\n * Create a new array of length n, where the elements are numbers\n * from 0 to n - 1.\n * @param {Number} n - the desired length of the range.\n * @returns {Array}\n * @example\n * // returns [ 0, 1, 2, 3 ]\n * Array.range(4);\n */Array.range=function(n){return Array.from(new Array(n),function(x,i){return i;});};/**\n * Array.matrix\n * Create a new two-dimensional array, where each element is its own index.\n * @param {Number} x - the desired number of columns (possible x values)\n * @param {Number} y - the desired number of rows (possible y values)\n * @returns {Array}\n * @example\n * // returns [\n * //   [ 0, 1, 2 ],\n * //   [ 0, 1, 2 ]\n * // ]\n * Array.matrix(3, 2);\n */Array.matrix=function(x,y){var rows=Array.range(y);var columns=Array.range(x);return rows.map(function(row,i){return columns.slice();});};","map":{"version":3,"names":["Array","range","n","from","x","i","matrix","y","rows","columns","map","row","slice"],"sources":["/Users/imvk._/Downloads/AlgorithmVisualizer-master/Algorithm-Visualizer/src/helpers/array_helpers.js"],"sourcesContent":["/**\n * A set of monkey-patched Array helpers.\n * Probably a bad idea to use these in a real production environment.\n * Monkey-patching is confusing to anyone seeing the project for the first\n * time (or coming back to it after a few weeks).\n * That said, this is a simple demo project, so what the hell, let's break\n * some rules =D\n */\n\n\n/**\n * Array.prototype.swap\n * Rearrange an array to swap the positions of two elements.\n * @param {Number} a - the index of the first element to swap.\n * @param {Number} b - the index of the second element to swap.\n * @returns {Array}\n * @example\n * // returns [ 'a', 'c', 'b' ]\n * [ 'a', 'b', 'c' ].swap(1, 2)\n */\n\n/**\n * Array.range\n * Create a new array of length n, where the elements are numbers\n * from 0 to n - 1.\n * @param {Number} n - the desired length of the range.\n * @returns {Array}\n * @example\n * // returns [ 0, 1, 2, 3 ]\n * Array.range(4);\n */\nArray.range = n => Array.from(new Array(n), (x,i) => i);\n\n/**\n * Array.matrix\n * Create a new two-dimensional array, where each element is its own index.\n * @param {Number} x - the desired number of columns (possible x values)\n * @param {Number} y - the desired number of rows (possible y values)\n * @returns {Array}\n * @example\n * // returns [\n * //   [ 0, 1, 2 ],\n * //   [ 0, 1, 2 ]\n * // ]\n * Array.matrix(3, 2);\n */\nArray.matrix = (x, y) => {\n    const rows = Array.range(y);\n    const columns = Array.range(x);\n    return rows.map( (row, i) => columns.slice() );\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAPA,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GATA,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACAA,KAAK,CAACC,KAAK,CAAG,SAAAC,CAAC,QAAI,CAAAF,KAAK,CAACG,IAAI,CAAC,GAAI,CAAAH,KAAK,CAACE,CAAC,CAAC,CAAE,SAACE,CAAC,CAACC,CAAC,QAAK,CAAAA,CAAC,GAAC,GAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACAL,KAAK,CAACM,MAAM,CAAG,SAACF,CAAC,CAAEG,CAAC,CAAK,CACrB,GAAM,CAAAC,IAAI,CAAGR,KAAK,CAACC,KAAK,CAACM,CAAC,CAAC,CAC3B,GAAM,CAAAE,OAAO,CAAGT,KAAK,CAACC,KAAK,CAACG,CAAC,CAAC,CAC9B,MAAO,CAAAI,IAAI,CAACE,GAAG,CAAE,SAACC,GAAG,CAAEN,CAAC,QAAK,CAAAI,OAAO,CAACG,KAAK,CAAC,CAAC,EAAC,CAAC,CAClD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}